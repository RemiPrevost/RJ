{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 /*\
import com.google.android.gms.common.ConnectionResult;\
import com.google.android.gms.common.GooglePlayServicesUtil;\
import com.google.android.gms.common.SignInButton;\
import com.google.android.gms.common.api.GoogleApiClient;\
import com.google.android.gms.common.api.ResultCallback;\
import com.google.android.gms.common.api.Status;\
import com.google.android.gms.plus.Plus;\
import com.google.android.gms.plus.model.people.Person;\
\
import android.app.Activity;\
import android.app.AlertDialog;\
import android.app.Dialog;\
import android.content.Intent;\
import android.content.IntentSender;\
import android.os.Build;\
import android.os.Bundle;\
import android.view.MenuItem;\
import android.view.View;\
import android.view.View.OnClickListener;\
import android.widget.CompoundButton;\
import android.widget.TextView;\
import android.widget.ToggleButton;\
\
public class MyActivity extends Activity implements OnClickListener,\
        GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener \{\
\
    private static final int DIALOG_GET_GOOGLE_PLAY_SERVICES = 1;\
\
    private static final int REQUEST_CODE_SIGN_IN = 1;\
    private static final int REQUEST_CODE_GET_GOOGLE_PLAY_SERVICES = 2;\
\
    private TextView mSignInStatus;\
    private GoogleApiClient mGoogleApiClient;\
    private SignInButton mSignInButton;\
    private View mSignOutButton;\
    private View mRevokeAccessButton;\
    private ConnectionResult mConnectionResult;\
\
    @Override\
    protected void onCreate(Bundle savedInstanceState) \{\
        super.onCreate(savedInstanceState);\
        setContentView(R.layout.sign_in_activity);\
\
        mGoogleApiClient = new GoogleApiClient.Builder(this)\
                .addApi(Plus.API, Plus.PlusOptions.builder()\
                        .addActivityTypes(MomentUtil.ACTIONS).build())\
                .addScope(Plus.SCOPE_PLUS_LOGIN)\
                .addConnectionCallbacks(this)\
                .addOnConnectionFailedListener(this)\
                .build();\
\
        mSignInStatus = (TextView) findViewById(R.id.sign_in_status);\
        mSignInButton = (SignInButton) findViewById(R.id.sign_in_button);\
        mSignInButton.setOnClickListener(this);\
        mSignOutButton = findViewById(R.id.sign_out_button);\
        mSignOutButton.setOnClickListener(this);\
        mRevokeAccessButton = findViewById(R.id.revoke_access_button);\
        mRevokeAccessButton.setOnClickListener(this);\
        ToggleButton scopeSelector = (ToggleButton) findViewById(R.id.scope_selection_toggle);\
        scopeSelector.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() \{\
            @Override\
            public void onCheckedChanged(CompoundButton compoundButton, boolean checked) \{\
                if (checked) \{\
                    mGoogleApiClient.disconnect();\
                    mGoogleApiClient = new GoogleApiClient.Builder(MyActivity.this)\
                            .addApi(Plus.API)\
                            .addScope(Plus.SCOPE_PLUS_PROFILE)\
                            .addConnectionCallbacks(MyActivity.this)\
                            .addOnConnectionFailedListener(MyActivity.this)\
                            .build();\
                    mGoogleApiClient.connect();\
                \} else \{\
                    mGoogleApiClient.disconnect();\
                    mGoogleApiClient = new GoogleApiClient.Builder(MyActivity.this)\
                            .addApi(Plus.API, Plus.PlusOptions.builder()\
                                    .addActivityTypes(MomentUtil.ACTIONS).build())\
                            .addScope(Plus.SCOPE_PLUS_LOGIN)\
                            .addConnectionCallbacks(MyActivity.this)\
                            .addOnConnectionFailedListener(MyActivity.this)\
                            .build();\
                    mGoogleApiClient.connect();\
                \}\
            \}\
        \});\
\
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) \{\
            getActionBar().setDisplayHomeAsUpEnabled(true);\
        \}\
    \}\
\
    @Override\
    public void onStart() \{\
        super.onStart();\
        mGoogleApiClient.connect();\
    \}\
\
    @Override\
    public void onStop() \{\
        mGoogleApiClient.disconnect();\
        super.onStop();\
    \}\
\
    @Override\
    public void onClick(View view) \{\
        switch(view.getId()) \{\
            case R.id.sign_in_button:\
                int available = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);\
                if (available != ConnectionResult.SUCCESS) \{\
                    showDialog(DIALOG_GET_GOOGLE_PLAY_SERVICES);\
                    return;\
                \}\
\
                try \{\
                    mSignInStatus.setText(getString(R.string.signing_in_status));\
                    mConnectionResult.startResolutionForResult(this, REQUEST_CODE_SIGN_IN);\
                \} catch (IntentSender.SendIntentException e) \{\
                    // Fetch a new result to start.\
                    mGoogleApiClient.connect();\
                \}\
                break;\
            case R.id.sign_out_button:\
                if (mGoogleApiClient.isConnected()) \{\
                    Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);\
                    mGoogleApiClient.disconnect();\
                    mGoogleApiClient.connect();\
                \}\
                break;\
            case R.id.revoke_access_button:\
                if (mGoogleApiClient.isConnected()) \{\
                    Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient).setResultCallback(\
                            new ResultCallback<Status>() \{\
                                @Override\
                                public void onResult(Status status) \{\
                                    if (status.isSuccess()) \{\
                                        mSignInStatus.setText(R.string.revoke_access_status);\
                                    \} else \{\
                                        mSignInStatus.setText(R.string.revoke_access_error_status);\
                                    \}\
                                    mGoogleApiClient.disconnect();\
                                    mGoogleApiClient.connect();\
                                \}\
                            \}\
                    );\
                    updateButtons(false /* isSignedIn */);\
                \}\
                break;\
        \}\
    \}\
\
    @Override\
    protected Dialog onCreateDialog(int id) \{\
        if (id != DIALOG_GET_GOOGLE_PLAY_SERVICES) \{\
            return super.onCreateDialog(id);\
        \}\
\
        int available = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);\
        if (available == ConnectionResult.SUCCESS) \{\
            return null;\
        \}\
        if (GooglePlayServicesUtil.isUserRecoverableError(available)) \{\
            return GooglePlayServicesUtil.getErrorDialog(\
                    available, this, REQUEST_CODE_GET_GOOGLE_PLAY_SERVICES);\
        \}\
        return new AlertDialog.Builder(this)\
                .setMessage(R.string.plus_generic_error)\
                .setCancelable(true)\
                .create();\
    \}\
\
    @Override\
    public void onActivityResult(int requestCode, int resultCode, Intent data) \{\
        if (requestCode == REQUEST_CODE_SIGN_IN\
                || requestCode == REQUEST_CODE_GET_GOOGLE_PLAY_SERVICES) \{\
            if (resultCode == RESULT_CANCELED) \{\
                mSignInStatus.setText(getString(R.string.signed_out_status));\
            \} else if (resultCode == RESULT_OK && !mGoogleApiClient.isConnected()\
                    && !mGoogleApiClient.isConnecting()) \{\
                // This time, connect should succeed.\
                mGoogleApiClient.connect();\
            \}\
        \}\
    \}\
\
    @Override\
    public void onConnected(Bundle connectionHint) \{\
        Person person = Plus.PeopleApi.getCurrentPerson(mGoogleApiClient);\
        String currentPersonName = person != null\
                ? person.getDisplayName()\
                : getString(R.string.unknown_person);\
        mSignInStatus.setText(getString(R.string.signed_in_status, currentPersonName));\
        updateButtons(true /* isSignedIn */);\
    \}\
\
    @Override\
    public void onConnectionSuspended(int cause) \{\
        mSignInStatus.setText(R.string.loading_status);\
        mGoogleApiClient.connect();\
        updateButtons(false /* isSignedIn */);\
    \}\
\
    @Override\
    public void onConnectionFailed(ConnectionResult result) \{\
        mConnectionResult = result;\
        updateButtons(false /* isSignedIn */);\
    \}\
\
    private void updateButtons(boolean isSignedIn) \{\
        if (isSignedIn) \{\
            mSignInButton.setVisibility(View.INVISIBLE);\
            mSignOutButton.setEnabled(true);\
            mRevokeAccessButton.setEnabled(true);\
        \} else \{\
            if (mConnectionResult == null) \{\
                // Disable the sign-in button until onConnectionFailed is called with result.\
                mSignInButton.setVisibility(View.INVISIBLE);\
                mSignInStatus.setText(getString(R.string.loading_status));\
            \} else \{\
                // Enable the sign-in button since a connection result is available.\
                mSignInButton.setVisibility(View.VISIBLE);\
                mSignInStatus.setText(getString(R.string.signed_out_status));\
            \}\
\
            mSignOutButton.setEnabled(false);\
            mRevokeAccessButton.setEnabled(false);\
        \}\
    \}\
\
    @Override\
    public boolean onOptionsItemSelected(MenuItem item) \{\
        switch (item.getItemId()) \{\
            case android.R.id.home:\
                Intent intent = new Intent(this, PlusSampleActivity.class);\
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\
                startActivity(intent);\
                finish();\
                return true;\
\
            default:\
                return super.onOptionsItemSelected(item);\
        \}\
    \}\
\}\
\
\
\
\
\
\
/*\
import android.app.Activity;\
import android.app.ProgressDialog;\
import android.content.Intent;\
import android.content.IntentSender.SendIntentException;\
import android.os.Bundle;\
import android.util.Log;\
import android.view.View;\
import android.view.View.OnClickListener;\
import android.widget.Toast;\
\
import com.google.android.gms.common.*;\
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;\
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;\
import com.google.android.gms.plus.PlusClient;\
\
public class MyActivity extends Activity implements ConnectionCallbacks, OnConnectionFailedListener\{\
\
    private static final int REQUEST_CODE_RESOLVE_ERR = 9000;\
    private static final String TAG = "GPlusLogin";\
\
    private ProgressDialog mConnectionProgressDialog;\
    private PlusClient mPlusClient;\
    private ConnectionResult mConnectionResult;\
\
    @Override\
    protected void onCreate(Bundle savedInstanceState) \{\
        // TODO Auto-generated method stub\
        super.onCreate(savedInstanceState);\
        setContentView(R.layout.activity_my);\
        mPlusClient = new PlusClient.Builder(this, this, this).setActions("http://schemas.google.com/AddActivity", "http://schemas.google.com/BuyActivity").build();\
        Bundle extras = getIntent().getExtras();\
        mConnectionProgressDialog = new ProgressDialog(this);\
        mConnectionProgressDialog.setMessage("Signing in...");\
\
        if(extras!=null)\{\
            if(extras.getString("signout")!=null)\{\
                if (mPlusClient.isConnected()) \{\
                    mPlusClient.clearDefaultAccount();\
                    mPlusClient.disconnect();\
                    mPlusClient.connect();\
                    finish();\
                    startActivity(getIntent());\
                \}\
            \}\
        \}else\{\
\
            findViewById(R.id.sign_in_button).setOnClickListener(new OnClickListener() \{\
\
                public void onClick(View view) \{\
                    if (view.getId() == R.id.sign_in_button && !mPlusClient.isConnected()) \{\
                        if (mConnectionResult == null) \{\
                            mConnectionProgressDialog.show();\
                        \} else \{\
                            try \{\
                                mConnectionResult.startResolutionForResult(MyActivity.this, REQUEST_CODE_RESOLVE_ERR);\
                            \} catch (SendIntentException e) \{\
                                // Nouvelle tentative de connexion\
                                mConnectionResult = null;\
                                mPlusClient.connect();\
                            \}\
                        \}\
                    \}\
                \}\
            \});\
        \}\
    \}\
\
    @Override\
    protected void onStart() \{\
        // TODO Auto-generated method stub\
        super.onStart();\
        mPlusClient.connect();\
    \}\
\
    @Override\
    protected void onStop() \{\
        // TODO Auto-generated method stub\
        super.onStop();\
        mPlusClient.disconnect();\
    \}\
\
    @Override\
    public void onConnectionFailed(ConnectionResult result) \{\
        // TODO Auto-generated method stub\
        if (mConnectionProgressDialog.isShowing()) \{\
            // The user clicked the sign-in button already. Start to resolve\
            // connection errors. Wait until onConnected() to dismiss the\
            // connection dialog.\
            if (result.hasResolution()) \{\
                try \{\
                    result.startResolutionForResult(MyActivity.this, REQUEST_CODE_RESOLVE_ERR);\
                \} catch (SendIntentException e) \{\
                    mPlusClient.connect();\
                \}\
            \}\
        \}\
\
        mConnectionResult = result;\
    \}\
\
    @Override\
    protected void onActivityResult(int requestCode, int responseCode, Intent intent) \{\
        if (requestCode == REQUEST_CODE_RESOLVE_ERR && responseCode == RESULT_OK) \{\
            mConnectionResult = null;\
            mPlusClient.connect();\
        \}\
    \}\
\
    @Override\
    public void onConnected(Bundle connectionHint) \{\
        mConnectionProgressDialog.dismiss();\
        Toast.makeText(this, "User is connected!", Toast.LENGTH_LONG).show();\
    \}\
\
    @Override\
    public void onDisconnected() \{\
        // TODO Auto-generated method stub\
        Log.d(TAG, "disconnected");\
    \}\
\
\}\
\
\
\
\
\
*/\
\
\
\
\
\
\
\
\
\
\
\
\
\
import com.google.android.gms.common.ConnectionResult;\
import com.google.android.gms.common.GooglePlayServicesUtil;\
import com.google.android.gms.common.SignInButton;\
import com.google.android.gms.common.api.GoogleApiClient;\
import com.google.android.gms.common.api.ResultCallback;\
import com.google.android.gms.common.api.Status;\
import com.google.android.gms.plus.Plus;\
import com.google.android.gms.plus.model.people.Person;\
\
import android.app.Activity;\
import android.app.AlertDialog;\
import android.app.Dialog;\
import android.content.Intent;\
import android.content.IntentSender;\
import android.os.Build;\
import android.os.Bundle;\
import android.view.MenuItem;\
import android.view.View;\
import android.view.View.OnClickListener;\
import android.widget.CompoundButton;\
import android.widget.TextView;\
import android.widget.ToggleButton;\
\
public class MyActivity extends Activity implements OnClickListener,\
        GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener \{\
\
    private static final int DIALOG_GET_GOOGLE_PLAY_SERVICES = 1;\
\
    private static final int REQUEST_CODE_SIGN_IN = 1;\
    private static final int REQUEST_CODE_GET_GOOGLE_PLAY_SERVICES = 2;\
\
    private TextView mSignInStatus;\
    private GoogleApiClient mGoogleApiClient;\
    private SignInButton mSignInButton;\
    private View mSignOutButton;\
    private View mRevokeAccessButton;\
    private ConnectionResult mConnectionResult;\
\
    @Override\
    protected void onCreate(Bundle savedInstanceState) \{\
        super.onCreate(savedInstanceState);\
        setContentView(R.layout.sign_in_activity);\
\
        mGoogleApiClient = new GoogleApiClient.Builder(this)\
                .addApi(Plus.API, Plus.PlusOptions.builder()\
                        .addActivityTypes(MomentUtil.ACTIONS).build())\
                .addScope(Plus.SCOPE_PLUS_LOGIN)\
                .addConnectionCallbacks(this)\
                .addOnConnectionFailedListener(this)\
                .build();\
\
        mSignInStatus = (TextView) findViewById(R.id.sign_in_status);\
        mSignInButton = (SignInButton) findViewById(R.id.sign_in_button);\
        mSignInButton.setOnClickListener(this);\
        mSignOutButton = findViewById(R.id.sign_out_button);\
        mSignOutButton.setOnClickListener(this);\
        mRevokeAccessButton = findViewById(R.id.revoke_access_button);\
        mRevokeAccessButton.setOnClickListener(this);\
        ToggleButton scopeSelector = (ToggleButton) findViewById(R.id.scope_selection_toggle);\
        scopeSelector.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() \{\
            @Override\
            public void onCheckedChanged(CompoundButton compoundButton, boolean checked) \{\
                if (checked) \{\
                    mGoogleApiClient.disconnect();\
                    mGoogleApiClient = new GoogleApiClient.Builder(MyActivity.this)\
                            .addApi(Plus.API)\
                            .addScope(Plus.SCOPE_PLUS_PROFILE)\
                            .addConnectionCallbacks(MyActivity.this)\
                            .addOnConnectionFailedListener(MyActivity.this)\
                            .build();\
                    mGoogleApiClient.connect();\
                \} else \{\
                    mGoogleApiClient.disconnect();\
                    mGoogleApiClient = new GoogleApiClient.Builder(MyActivity.this)\
                            .addApi(Plus.API, Plus.PlusOptions.builder()\
                                    .addActivityTypes(MomentUtil.ACTIONS).build())\
                            .addScope(Plus.SCOPE_PLUS_LOGIN)\
                            .addConnectionCallbacks(MyActivity.this)\
                            .addOnConnectionFailedListener(MyActivity.this)\
                            .build();\
                    mGoogleApiClient.connect();\
                \}\
            \}\
        \});\
\
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) \{\
            getActionBar().setDisplayHomeAsUpEnabled(true);\
        \}\
    \}\
\
    @Override\
    public void onStart() \{\
        super.onStart();\
        mGoogleApiClient.connect();\
    \}\
\
    @Override\
    public void onStop() \{\
        mGoogleApiClient.disconnect();\
        super.onStop();\
    \}\
\
    @Override\
    public void onClick(View view) \{\
        switch(view.getId()) \{\
            case R.id.sign_in_button:\
                int available = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);\
                if (available != ConnectionResult.SUCCESS) \{\
                    showDialog(DIALOG_GET_GOOGLE_PLAY_SERVICES);\
                    return;\
                \}\
\
                try \{\
                    mSignInStatus.setText(getString(R.string.signing_in_status));\
                    mConnectionResult.startResolutionForResult(this, REQUEST_CODE_SIGN_IN);\
                \} catch (IntentSender.SendIntentException e) \{\
                    // Fetch a new result to start.\
                    mGoogleApiClient.connect();\
                \}\
                break;\
            case R.id.sign_out_button:\
                if (mGoogleApiClient.isConnected()) \{\
                    Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);\
                    mGoogleApiClient.disconnect();\
                    mGoogleApiClient.connect();\
                \}\
                break;\
            case R.id.revoke_access_button:\
                if (mGoogleApiClient.isConnected()) \{\
                    Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient).setResultCallback(\
                            new ResultCallback<Status>() \{\
                                @Override\
                                public void onResult(Status status) \{\
                                    if (status.isSuccess()) \{\
                                        mSignInStatus.setText(R.string.revoke_access_status);\
                                    \} else \{\
                                        mSignInStatus.setText(R.string.revoke_access_error_status);\
                                    \}\
                                    mGoogleApiClient.disconnect();\
                                    mGoogleApiClient.connect();\
                                \}\
                            \}\
                    );\
                    updateButtons(false /* isSignedIn */);\
                \}\
                break;\
        \}\
    \}\
\
    @Override\
    protected Dialog onCreateDialog(int id) \{\
        if (id != DIALOG_GET_GOOGLE_PLAY_SERVICES) \{\
            return super.onCreateDialog(id);\
        \}\
\
        int available = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);\
        if (available == ConnectionResult.SUCCESS) \{\
            return null;\
        \}\
        if (GooglePlayServicesUtil.isUserRecoverableError(available)) \{\
            return GooglePlayServicesUtil.getErrorDialog(\
                    available, this, REQUEST_CODE_GET_GOOGLE_PLAY_SERVICES);\
        \}\
        return new AlertDialog.Builder(this)\
                .setMessage(R.string.plus_generic_error)\
                .setCancelable(true)\
                .create();\
    \}\
\
    @Override\
    public void onActivityResult(int requestCode, int resultCode, Intent data) \{\
        if (requestCode == REQUEST_CODE_SIGN_IN\
                || requestCode == REQUEST_CODE_GET_GOOGLE_PLAY_SERVICES) \{\
            if (resultCode == RESULT_CANCELED) \{\
                mSignInStatus.setText(getString(R.string.signed_out_status));\
            \} else if (resultCode == RESULT_OK && !mGoogleApiClient.isConnected()\
                    && !mGoogleApiClient.isConnecting()) \{\
                // This time, connect should succeed.\
                mGoogleApiClient.connect();\
            \}\
        \}\
    \}\
\
    @Override\
    public void onConnected(Bundle connectionHint) \{\
        Person person = Plus.PeopleApi.getCurrentPerson(mGoogleApiClient);\
        String currentPersonName = person != null\
                ? person.getDisplayName()\
                : getString(R.string.unknown_person);\
        mSignInStatus.setText(getString(R.string.signed_in_status, currentPersonName));\
        updateButtons(true /* isSignedIn */);\
    \}\
\
    @Override\
    public void onConnectionSuspended(int cause) \{\
        mSignInStatus.setText(R.string.loading_status);\
        mGoogleApiClient.connect();\
        updateButtons(false /* isSignedIn */);\
    \}\
\
    @Override\
    public void onConnectionFailed(ConnectionResult result) \{\
        mConnectionResult = result;\
        updateButtons(false /* isSignedIn */);\
    \}\
\
    private void updateButtons(boolean isSignedIn) \{\
        if (isSignedIn) \{\
            mSignInButton.setVisibility(View.INVISIBLE);\
            mSignOutButton.setEnabled(true);\
            mRevokeAccessButton.setEnabled(true);\
        \} else \{\
            if (mConnectionResult == null) \{\
                // Disable the sign-in button until onConnectionFailed is called with result.\
                mSignInButton.setVisibility(View.INVISIBLE);\
                mSignInStatus.setText(getString(R.string.loading_status));\
            \} else \{\
                // Enable the sign-in button since a connection result is available.\
                mSignInButton.setVisibility(View.VISIBLE);\
                mSignInStatus.setText(getString(R.string.signed_out_status));\
            \}\
\
            mSignOutButton.setEnabled(false);\
            mRevokeAccessButton.setEnabled(false);\
        \}\
    \}\
\
    @Override\
    public boolean onOptionsItemSelected(MenuItem item) \{\
        // Handle action bar item clicks here. The action bar will\
        // automatically handle clicks on the Home/Up button, so long\
        // as you specify a parent activity in AndroidManifest.xml.\
        int id = item.getItemId();\
        return id == R.id.action_settings || super.onOptionsItemSelected(item);\
    \}\
\}\
}